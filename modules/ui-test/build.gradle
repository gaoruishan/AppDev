if (isMudulesTest.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
    //butterknife插件
//    apply plugin: 'com.jakewharton.butterknife'
    //添加输出aar
    apply from: '../../build_copy.gradle'
}
//buildscript {
//    repositories {
//        mavenCentral()
//    }
//    dependencies {
//        classpath 'com.jakewharton:butterknife-gradle-plugin:8.8.1'
//    }
//}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        if (isMudulesTest.toBoolean()) {
            applicationId "com.grs.apptest"
        } else {
            //资源前缀
//            resourcePrefix "test_"
        }

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    sourceSets.main {
        // MIM or Not MIM
        if (isMudulesTest.toBoolean()) {
            manifest.srcFile 'src/main/debug/AndroidManifest.xml'
        } else {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java {
                exclude 'debug/**'
            }
        }

        jni.srcDirs = []
        //LOCAL_LDFLAGS += -fuse-ld=bfd
        //jni.srcDirs 'src/main/jni'
        jniLibs.srcDir 'src/main/libs'

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        jumboMode true
        javaMaxHeapSize "4g"
        preDexLibraries = false
    }
}
//打包输出apk格式：app-ihaier-1.0.0-时间.apk
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {
            def releaseApkName = "-${variant.versionName}" + '.apk'
//                outputFileName = outputFile.name.replace("-release.apk", releaseApkName)
            def fileName = outputFile.name.replace("-release.apk", releaseApkName)
            output.outputFile = new File(outputFile.parent, fileName)
        }
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    if (isMudulesTest.toBoolean()) {
        compile project(':bizs:biz-test')
    } else {
        compile(name: 'lib-base', ext: 'aar')
        compile(name: 'lib-res', ext: 'aar')
        compile(name: 'lib-utils', ext: 'aar')
        compile(name: 'lib-widget', ext: 'aar')
    }

}
